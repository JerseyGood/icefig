{"name":"IceFig","tagline":"Java elegant supplement","body":"[![Build Status](https://travis-ci.org/wapatesh/icefig.svg?branch=master)](https://travis-ci.org/wapatesh/icefig) [![Documentation](https://readthedocs.org/projects/svg-pottery/badge/?version=latest)](http://www.javadoc.io/doc/com.worksap/icefig) [![codecov.io](http://codecov.io/github/wapatesh/icefig/coverage.svg?branch=master)](http://codecov.io/github/wapatesh/icefig?branch=master)\r\n\r\n## Introduction\r\n\r\nJava 8 delivered lambda expressions, but without the enhancement of basic libraries like List, Map, String, which makes\r\nlambda expression still not delightful.\r\n\r\nInspired by other popular languages like Ruby and Scala, IceFig intends to supply the missing.\r\n\r\n## Quick Scan\r\n\r\nElegant alternative to List: **Seq**\r\n```java\r\nSeq<Integer> seq = Seqs.newSeq(1,2,3);\r\nseq.shuffle(); // copy to a new seq and shuffle it\r\nseq.forEach((value, idx) -> { // with index\r\n    // (1, 0)  (2, 1)  (3, 2)\r\n});\r\nseq.forEachCons(2, (values)->{\r\n    // [1,2]  [2, 3]\r\n});\r\n\r\nseq.join(\"-\"); //\"1-2-3\"\r\n\r\nseq.map(a -> a+ 1).distinct().reverse().join()\r\n```\r\n\r\nElegant alternative to Map: **Hash**\r\n```java\r\nHash<Integer, Integer> hash = Hash.newHash();\r\nhash.set(1, 2).set(2, 3).set(3, 3);\r\nhash.containsAny((k, v)-> k+v == 5 ); //true\r\nhash.keysOf(3); // [2, 3]\r\n```\r\n\r\nElegant alternative to String: **CharSeq**\r\n```java\r\nCharSeq str = CharSeq.of(\"a b c d e f g\");\r\nstr.split(\" \").join(\"-\").capitalize(); //\"A-b-c-d-e-f-g\"\r\nstr.partition(\"d e\").map(CharSeq::trim);  //[\"a b c\", \"d e\", \"f g\"]\r\n```\r\n\r\n[Full Javadoc](http://www.javadoc.io/doc/com.worksap/icefig)\r\n\r\n## Include it\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.worksap</groupId>\r\n    <artifactId>icefig</artifactId>\r\n    <version>0.1.0</version>\r\n</dependency>\r\n```\r\n\r\n\r\n## Concept\r\n\r\n### Not stream\r\n\r\nIceFig is different from Stream and implemented without Stream. While, it is simpler concept -- supplement methods on the basic library.\r\n\r\nStream has several characteristics:\r\n\r\n1. Trends to process each element independently\r\n2. Infinite that we can not get the size\r\n3. Designed for large data flow performance\r\n\r\nThus, Stream may not be able to support operations related with the size of it, nor operations involving multiple or even random elements.\r\n\r\nIceFig targets on \"small data\" operations within application logic, to provide simple & beautiful code writing about String, List, Map operation & transformation.\r\n\r\n### No utilities\r\n\r\nIn traditional Java way, we use a lot of utilities (StringUtils, FileUtils) for the missing methods in the standard library. While, in IceFig, we make an object oriented and functional way to free you from tedious codes.\r\n\r\n### Zero runtime dependency\r\n\r\nIceFig has no external runtime dependency except JDK 8.\r\n\r\n### Conventions\r\n\r\nIceFig uses conventions on method names. If there is a pair of methods `name, name$`, method ends with `$` means calling this method will change the object itself, while calling the other won't.\r\n\r\n\r\n## License\r\n\r\n[Apache License 2.0](LICENSE)\r\n\r\n## Contribution\r\n\r\nFeel free to submit issues & PRs","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}